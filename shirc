#!/bin/sh -e

# IRC "client" written in POSIX sh.
# I use client as lightly as possible because it doesn't do much at all.
# Uses many dirty hacks, but it works.
#
# <trinity> trying to write an actual IRC client in shell because it's possible
# <WSJ> wake me up when it does multi channel. bonus points if it creates files based on those channels and redirects PRIVMSG, JOIN, PART and QUIT to said files
# <trinity> probably won't happen in shellscript
#
# Usage:
#   - ADDRESS, PORT is where you connect.
#   - NICKNAME, USERNAME, and REALNAME env variables control your user info.
#   - If SSL is set, it will connect to the server with openssl.
#     If it is not set, it will connect to the server with netcat.
#     Whichever one you use, you obviously need it installed.
#   - Send *raw* messages to the server by writing to the "./control" FIFO.
#   - Messages sent to you will appear in `buffers/<nickname>`.
#   - When you JOIN a channel, it will show up in `buffers/<channel name>`.
#     That directory will contain two files: `messages`, a file written to
#     whenever a message that is relevant to the channel is received, and
#     `users`, which contains the users in the channel.
#     Users file has a bug with operator prefixes, if I ever open this file
#     again please remind me to fix it.
#   - Messages routed to wherever are still *raw* IRC messages.
#   - There is no CTCP support. Terminals shouldn't render the \x01 bytes so if
#     you end up with strange messages like "VERSION" and "ACTION uses CTCP"
#     then it is most likely a CTCP message.
#     Note: the ACTION command in CTCP is generated by /me. Most clients will
#     render this as "<nickname> <action message>` instead of how messages
#     usually are.
#
#   Essentially, set your environment variables and chuck commands into
#   `control`. `echo "JOIN #example" > control`,
#   `echo "PRIVMSG #example :hi" > control`, it's *raw* IRC commands.
#
#   Once you've joined a channel, or received a message, you may notice some
#   things appear in `buffers/`. Directories are channels, files are PMs.
#   You can `tail -f buffers/#channel/messages`, but don't write to the file
#   because we don't read from it. Remember, use `control`.

ADDRESS=${ADDRESS:-"feeling.murderu.us"}
PORT=${PORT:-"6667"}
NICKNAME=${NICKNAME:-"$(whoami)"}
USERNAME=${USERNAME:-"$(whoami)"}
REALNAME=${REALNAME:-"$(whoami)"}

FIFO="control"
BUFFERS="buffers"

CR="$(printf '\015')"

# Check if we're running already
if [ -e "$FIFO" ] || [ -e "$BUFFERS" ]; then
	echo "Another instance may be running, or it didn't clean itself up." >&2
	echo "Delete $FIFO and $BUFFERS (y/N)?" >&2
	read -r confirm
	if [ "$confirm" = "y" ]; then
		rm -v "$FIFO" >&2
		rm -rv "$BUFFERS" >&2
	else
		exit 1
	fi
fi

# Make control FIFO
# Anything written here gets sent to the server
# Also available on FD 3 so you can write to it in the script
mkfifo "$FIFO"
exec 3<>"$FIFO" # open for reading/writing

# Make buffers directory
mkdir "$BUFFERS"

cleanup() {
	[ -n "$cleaned" ] && return 1

	echo "QUIT" >&3 || true

	rm -r "$BUFFERS"

	exec 3<&- # close control fifo
	rm "$FIFO"
	cleaned=1
}

# run this on exit
trap cleanup EXIT INT HUP

# Register to IRC
cat <<EOF >&3
NICK $NICKNAME
USER $USERNAME 0 * :$REALNAME
EOF

open_channel() {
	mkdir -p "$BUFFERS/$1"
	:>"$BUFFERS/$1/users"
	:>"$BUFFERS/$1/messages"
}

close_channel() {
	rm -r "$BUFFERS/$1"
}

channel_join() {
	# HACK
	printf "%s\n" "$2" | cat "$BUFFERS/$1/users" - | sort | uniq > "$BUFFERS/$1/_users"
	cat "$BUFFERS/$1/_users" > "$BUFFERS/$1/users"
	rm "$BUFFERS/$1/_users"
}

channel_leave() {
	# HACK
	sed -i "/$2/d" "$BUFFERS/$1/users"
}

privmsg() {
	printf '%s\n' "$2" >> "$BUFFERS/$1"
}

channel_msg() {
	if [ -d "$BUFFERS/$1" ]; then
		printf '%s\n' "$2" >> "$BUFFERS/$1/messages"
	fi
}

# Get a nickname from a prefix.
prefix_get_nick() {
	case "$1" in
		:*!*@*)
			# nick, user, host
			_tmp="${1%%!*}"
			printf "%s" "${_tmp#:}"
			;;
		*)
			return 1
			;;
	esac
}

CONNCMD="nc $ADDRESS $PORT"
if [ -n "$SSL" ]; then
	CONNCMD="openssl s_client -quiet -connect $ADDRESS:$PORT"
fi

$CONNCMD <&3 | while read -r line; do
	line="${line%%"$CR"}"
	prefix="${line%% *}"

	tokens="${line#:* }"
	command="${tokens%% *}"
	args="${tokens##"$command" }"
	trailing="${tokens#* :}" # HACK: really shouldn't do this but makes life easier

	if [ -z "$prefix" ]; then
		# we probably don't care
		continue
	fi

	if [ -z "$trailing" ]; then
		# use last argument
		trailing="${args##* }"
	fi

	case "$command" in
		JOIN)
			nick="$(prefix_get_nick "$prefix")"
			if [ "$nick" = "$NICKNAME" ]; then
				open_channel "$trailing"
			else
				channel_join "$trailing" "$nick"
				channel_msg "$trailing" "$line"
			fi
			;;
		PART)
			nick="$(prefix_get_nick "$prefix")"
			if [ "$nick" = "$NICKNAME" ]; then
				close_channel "${args%% *}"
			else
				channel_leave "${args%% *}" "$nick"
				channel_msg "${args%% *}" "$line"
			fi
			;;
		KICK)
			nick="$(prefix_get_nick "$prefix")"
			channel="${args%% *}"
			_tmp="${args#* }"
			user="${_tmp%% *}"

			if [ "$user" != "$NICKNAME" ]; then
				channel_leave "$channel" "$user"
			fi
			channel_msg "$channel" "$line"
			;;
		QUIT)
			nick="$(prefix_get_nick "$prefix")"
			for channel in "$BUFFERS/"*; do
				if [ ! -d "$channel" ]; then
					continue
				fi

				c="$(basename "$channel")"
				channel_leave "$c" "$nick"
				channel_msg "$c" "$line"
			done
			;;
		PRIVMSG|NOTICE)
			nick="$(prefix_get_nick "$prefix")"
			channel="${args%% *}"
			if [ "$channel" = "$NICKNAME" ]; then
				privmsg "$nick" "$line"
			else
				channel_msg "$channel" "$line"
			fi
			;;
		MODE)
			channel="${args%% *}"
			printf '%s\n' "$line"
			channel_msg "$channel" "$line"
			;;
		353)
			# names
			_tmp="${tokens% :*}" # pop off trailing
			channel="${_tmp##* }" # get last arg

			printf '%s\n' "$trailing" | tr ' ' '\n' | while read -r user; do
				# TOOD: strip off prefixes
				channel_join "$channel" "$user"
			done
			;;
		PING)
			printf 'PONG %s\r\n' "$tokens" >&3
			;;
		366)
			# consume this
			;;
		*)
			printf '%s\n' "$line"
			;;
	esac
done
